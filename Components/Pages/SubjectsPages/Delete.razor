@page "/subjects/delete"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h3 class="mb-4">Are you sure you want to delete this?</h3>

<div class="container">
    <h4 class="mb-4">Subjects</h4>
    <hr />

    @if (subjects is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-3">Name:</dt>
                    <dd class="col-sm-9">@subjects.Name</dd>

                    <dt class="col-sm-3">Major:</dt>
                    <dd class="col-sm-9">@subjects.Major.Name</dd>

                    <dt class="col-sm-3">Code:</dt>
                    <dd class="col-sm-9">@subjects.Code</dd>
                </dl>

                <div class="mt-4">
                    <EditForm method="post" Model="subjects" OnValidSubmit="DeleteSubjects" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-danger me-2" disabled="@(subjects is null)">
                            <i class="fa-solid fa-trash"></i> Delete
                        </button>
                        <a href="/subjects" class="btn btn-secondary">
                            <i class="fa-solid fa-arrow-left"></i> Back to List
                        </a>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>


@code {
    Subjects? subjects;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        subjects = await context.Subjects.Include(m => m.Major).FirstOrDefaultAsync(m => m.Id == Id);

        if (subjects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteSubjects()
    {
        using var context = DbFactory.CreateDbContext();
        context.Subjects.Remove(subjects!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/subjects");
    }
}
