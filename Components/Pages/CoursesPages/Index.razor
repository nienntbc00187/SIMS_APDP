@page "/courses"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Courses</PageTitle>

<h1 class="my-4">Courses</h1>

@if (BlazorApp3.Components.Layout.NavMenu.isAdmin)
{
    <div class="mb-3">
        <a href="courses/create" class="btn btn-primary">
            <i class="fa-solid fa-square-plus"></i> Add Course
        </a>
    </div>
}

<div class="table-responsive">
    <table class="table table-bordered table-striped table-hover">
        <thead class="table-info">
            <tr>
                <th>Course Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Semester</th>
                <th>Lecture</th>
                <th>Subject</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in Courses)
            {
                <tr>
                    <td>@course.Name</td>
                    <td>@course.StartDate.ToShortDateString()</td>
                    <td>@course.EndDate.ToShortDateString()</td>
                    <td>@course.Semester.Name</td>
                    <td>@course.Lecture.Name</td>
                    <td>@course.Subject.Name</td>
                    <td>
                        @if (BlazorApp3.Components.Layout.NavMenu.isAdmin)
                        {
                            <a href="@($"courses/edit?id={course.Id}")" class="btn btn-warning btn-sm" title="Edit">
                                <i class="fa-solid fa-pen-to-square"></i> Edit
                            </a>
                            <a href="@($"courses/details?id={course.Id}")" class="btn btn-info btn-sm ms-2" title="View">
                                <i class="fa-solid fa-circle-info"></i> View
                            </a>
                            <a href="@($"courses/delete?id={course.Id}")" class="btn btn-danger btn-sm ms-2" title="Delete">
                                <i class="fa-solid fa-trash"></i> Delete
                            </a>
                        }
                        <a href="@($"courses/assign?id={course.Id}")" class="btn btn-secondary btn-sm ms-2" title="Assign Students">
                            <i class="fa-solid fa-user-plus"></i> Assign Students
                        </a>
                        <a href="@($"courses/grade?id={course.Id}")" class="btn btn-success btn-sm ms-2" title="Add Grades">
                            <i class="fa-solid fa-graduation-cap"></i> Add Grades
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
        private List<Courses> Courses { get; set; } = new List<Courses>();
private bool IsAdmin { get; set; }

protected override async Task OnInitializedAsync()
{
        using var context = DbFactory.CreateDbContext();

        Courses = await context.Courses
            .Include(m => m.Semester)
            .Include(m => m.Subject)
            .Include(m => m.Lecture)
            .ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
}
}
