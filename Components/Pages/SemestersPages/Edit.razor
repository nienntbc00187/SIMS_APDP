@page "/Semesters/edit"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>


<h4 class="mb-4">Edit Semesters</h4>
<hr />

@if (Semesters is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm method="post" Model="Semesters" OnValidSubmit="UpdateSemesters" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <input type="hidden" name="Semesters.Id" value="@Semesters.Id" />

                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Semesters.Name" class="form-control" />
                    <ValidationMessage For="() => Semesters.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="startdate" class="form-label">Start Date:</label>
                    <InputDate id="startdate" @bind-Value="Semesters.StartDate" class="form-control" />
                    <ValidationMessage For="() => Semesters.StartDate" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="enddate" class="form-label">End Date:</label>
                    <InputDate id="enddate" @bind-Value="Semesters.EndDate" class="form-control" />
                    <ValidationMessage For="() => Semesters.EndDate" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Save</button>
            </EditForm>
        </div>
    </div>
}

<div class="mt-3">
    <a href="/semesters" class="btn btn-secondary">Back to List</a>
</div>


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Semesters? Semesters { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Semesters ??= await context.Semesters.FirstOrDefaultAsync(m => m.Id == Id);

        if (Semesters is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSemesters()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Semesters!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SemestersExists(Semesters!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/semesters");
    }

    bool SemestersExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Semesters.Any(e => e.Id == id);
    }
}
